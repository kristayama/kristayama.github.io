# scale_color_brewer(palette = "Set2")
# scale_color_viridis_d(option = "plasma")
g_scale <- g_line_rec +
# change how assigns colors to the variable quality_group
# use rocket palette style within viridis family
# direction = -1 reverses the order of the palette
scale_color_viridis_d(option = "rocket", direction = -1) +
# where to place tick marks on the x-axis
scale_x_date(
breaks = as.Date(c("2019-12-01", "2020-12-01", "2021-12-01","2022-12-01")),
labels = c("2019-12", "2020-12", "2021-12", "2022-12")
) +
# formats the numeric values into percentages with a plus or minus sign
scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75),
labels = function(x) sprintf("%+d%%", x * 100)
)
g_scale
g_coordinate <- g_scale +
# limits the y-axis to between −0.15 and 0.9
coord_cartesian(ylim = c(-0.15, 0.9))
g_coordinate
g_theme <- g_coordinate +
theme_minimal(base_family = "Helvetica", base_size = 12) +
theme(
# ---------------- for the whole plot ----------------
text = element_text(lineheight = 1.1), # set line height for all text
plot.title = element_text(face = "bold", size = 18), # make title bold and large
plot.margin = margin(10, 20, 10, 20), # external margins (top, right, bottom, left)
# ---------------- for x and y axis ----------------
axis.title.x = element_blank(), # remove axis.title.x
axis.title.y = element_blank(),
axis.ticks.x = element_line(linewidth = 0.4), # style tick marks
axis.ticks.y = element_line(linewidth = 0.4),
# ---------------- for grid and panel ----------------
panel.grid = element_blank(), # remove the entire grid lines
panel.spacing.x = unit(1.6, "lines"), # spacing between facets horizontally
# ---------------- for the legend ----------------
legend.position = "bottom", # place legend below the plot
legend.title = element_text(size = 10, face = "bold"),
# ---------------- for facet ----------------
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", # facet labels
size = 14,
margin = margin(t = 25)) # top margin (t/r/b/l)
)
g_theme
ggplot(
filter(apt_rent_rel, month >= as.Date("2019-12-01") & month <= as.Date("2022-12-01")),
aes(x = month, y = rent_change, color = quality_group)
) +
# 1️⃣ geometry
geom_hline(yintercept = 0, linewidth = 0.6) +
annotate("rect",
xmin = as.Date("2020-01-01"), xmax = as.Date("2021-07-01"),
ymin = 0, ymax = 0.5,
fill = "#e37d5a", alpha = 0.05) +
annotate("text",
x = as.Date("2020-10-01"),
y = 0.35,
label = "Pandemic\nPeriod",
color = "gray40", size = 2.5, fontface = "italic") +
geom_line(linewidth = 1) +
# 2️⃣ scale
scale_color_viridis_d(option = "rocket", direction = -1) +
scale_x_date(
breaks = as.Date(c("2019-12-01", "2020-12-01", "2021-12-01","2022-12-01")),
labels = c("2019-12", "2020-12", "2021-12", "2022-12")
) +
scale_y_continuous(
labels = function(x) sprintf("%+d%%", x * 100),
breaks = c(-0.25, 0, 0.25, 0.5, 0.75, 1.0)
) +
# 3️⃣ facet and coordinate system
facet_wrap(~bed_group, nrow = 1) +
coord_cartesian(clip = "off", ylim = c(-0.15, 0.9)) +
# 4️⃣ labels
labs(
title = "Washington State Monthly Apartment Rent Changes Since Covid-19",
subtitle = "Apartment Rent Compared to December 2019 by Quality Levels and Number of Bedroom. Data Source: RentHub, 2019-2022",
x = "Time",
y = "Relative Rent Change",
color = "Quality Levels of Apartment"
) +
# 5️⃣ theme
theme_minimal(base_family = "Helvetica", base_size = 12) +
theme(
text = element_text(lineheight = 1.1),
plot.title = element_text(face = "bold", size = 18),
axis.title.x = element_blank(),
axis.ticks.x = element_line(linewidth = 0.4),
axis.ticks.y = element_line(linewidth = 0.4),
axis.title.y = element_blank(),
legend.position = "bottom",
legend.title = element_text(size = 10, face = "bold"),
panel.grid = element_blank(),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 14, margin = margin(t = 25)),
panel.spacing.x = unit(1.6, "lines"),
plot.margin = margin(10, 20, 10, 20)
)
# save it as 14 inch * 7 inch
ggsave("rent_change_plot.png", width = 14, height = 7, dpi = 200)
# save it as 7 inch * 3.5 inch
ggsave("rent_change_plot_735.png", width = 7, height = 3.5, dpi = 200)
```{r plots!}
# Convert Y/N to 1/0 for all feature columns
feature_list <- c("GRANITE","STAINLESS","POOL","GYM","DOORMAN","FURNISHED","LAUNDRY","GARAGE","CLUBHOUSE")
rental[feature_list] <- lapply(rental[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
# Create a total luxury feature count
rental <- rental %>%
mutate(LUXURY_COUNT = GRANITE + GYM + POOL + DOORMAN + GARAGE + LAUNDRY)
# Jittered boxplot: Rent by presence of gym
ggplot(rental, aes(x = factor(GYM, labels = c("No", "Yes")), y = RENT_PRICE, fill = factor(GYM))) +
geom_boxplot(alpha = 0.5, outlier.shape = NA) +  # hide boxplot outliers to avoid double points
geom_jitter(width = 0.2, alpha = 0.6, color = "red") +  # show individual data points
scale_fill_manual(values = c("grey", "blue")) +
labs(
title = "Impact of Gym Access on Rent Price",
x = "Has Gym",
y = "Rent Price ($)",
fill = "Gym"
) +
theme_minimal()
# Calculate average rent difference for selected features
feature_list <- c("FURNISHED","GARAGE","DOORMAN","GRANITE","STAINLESS")
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE)) %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(DIFF = PRESENT_1 - PRESENT_0)  # difference Yes - No
# Bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip() +  # horizontal bars for readability
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Increase in Rent for Listings with Specific Features",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal()
# Convert Y/N to 1/0 for all feature columns
feature_list <- c("GRANITE","STAINLESS","POOL","GYM","DOORMAN","FURNISHED","LAUNDRY","GARAGE","CLUBHOUSE")
rental[feature_list] <- lapply(rental[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
rental[feature_list] <- lapply(rental[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
# Create a total luxury feature count
rental <- rental %>%
mutate(LUXURY_COUNT = GRANITE + GYM + POOL + DOORMAN + GARAGE + LAUNDRY)
# Calculate average rent difference for features
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE)) %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(DIFF = PRESENT_1 - PRESENT_0)  # difference Yes - No
# Calculate average rent difference for features
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
# Replace missing PRESENT_0 or PRESENT_1 with 0
mutate(
PRESENT_0 = ifelse(is.na(PRESENT_0), 0, PRESENT_0),
PRESENT_1 = ifelse(is.na(PRESENT_1), 0, PRESENT_1),
DIFF = PRESENT_1 - PRESENT_0
)
library(dplyr)
library(tidyr)
library(ggplot2)
feature_list <- c("GRANITE","STAINLESS","POOL","GYM","DOORMAN",
"FURNISHED","LAUNDRY","GARAGE","CLUBHOUSE")
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(
PRESENT_0 = if("PRESENT_0" %in% colnames(.)) PRESENT_0 else 0,
PRESENT_1 = if("PRESENT_1" %in% colnames(.)) PRESENT_1 else 0,
DIFF = PRESENT_1 - PRESENT_0
)
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(
PRESENT_0 = if("PRESENT_0" %in% colnames(.)) PRESENT_0 else 0,
PRESENT_1 = if("PRESENT_1" %in% colnames(.)) PRESENT_1 else 0,
DIFF = PRESENT_1 - PRESENT_0
)
# Bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Increase in Rent for Listings with Specific Features",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal()
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
# Fill missing columns safely
mutate(
PRESENT_0 = ifelse("PRESENT_0" %in% colnames(.), PRESENT_0, NA),
PRESENT_1 = ifelse("PRESENT_1" %in% colnames(.), PRESENT_1, NA),
# Now compute difference, treating NA as 0
DIFF = coalesce(PRESENT_1,0) - coalesce(PRESENT_0,0)
)
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
# Fill missing columns safely
mutate(
PRESENT_0 = ifelse("PRESENT_0" %in% colnames(.), PRESENT_0, NA),
PRESENT_1 = ifelse("PRESENT_1" %in% colnames(.), PRESENT_1, NA),
# Now compute difference, treating NA as 0
DIFF = coalesce(PRESENT_1,0) - coalesce(PRESENT_0,0)
)
# Bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Increase in Rent for Listings with Specific Features",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal()
# load the rental listing data, it may take a while because its size
rental <- read_csv("rental_data_wa.csv")
rental <- rental %>%
filter(DATE_POSTED >= as.Date("2019-01-01") &
DATE_POSTED <= as.Date("2023-12-31"))
# check the data dimension
dim(rental)
# Convert Y/N to 1/0 for all feature columns
feature_list <- c("GRANITE","STAINLESS","POOL","GYM","DOORMAN","FURNISHED","LAUNDRY","GARAGE","CLUBHOUSE")
rental[feature_list] <- lapply(rental[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
rental[feature_list] <- lapply(rental[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
# Create a total luxury feature count
rental <- rental %>%
mutate(LUXURY_COUNT = GRANITE + GYM + POOL + DOORMAN + GARAGE + LAUNDRY)
# Create a total luxury feature count
rental <- rental %>%
mutate(LUXURY_COUNT = GRANITE + GYM + POOL + DOORMAN + GARAGE + LAUNDRY)
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
# Fill missing columns safely
mutate(
PRESENT_0 = ifelse("PRESENT_0" %in% colnames(.), PRESENT_0, NA),
PRESENT_1 = ifelse("PRESENT_1" %in% colnames(.), PRESENT_1, NA),
# Now compute difference, treating NA as 0
DIFF = coalesce(PRESENT_1,0) - coalesce(PRESENT_0,0)
)
# load the rental listing data, it may take a while because its size
rental <- read_csv("rental_data_wa.csv")
rental <- rental %>%
filter(DATE_POSTED >= as.Date("2019-01-01") &
DATE_POSTED <= as.Date("2023-12-31"))
# check the data dimension
dim(rental)
# Convert Y/N to 1/0 for all feature columns
feature_list <- c("GRANITE","STAINLESS","POOL","GYM","DOORMAN","FURNISHED","LAUNDRY","GARAGE","CLUBHOUSE")
rental_binary <- rental
rental_binary[feature_list] <- lapply(rental_binary[feature_list], function(x) {
case_when(
x == "Y" ~ 1,
x == "N" ~ 0,
x == NA ~ 0
)
})
# Create a total luxury feature count
rental_binary <- rental_binary %>%
mutate(LUXURY_COUNT = GRANITE + GYM + POOL + DOORMAN + GARAGE + LAUNDRY)
# Jittered boxplot: Rent by presence of gym
ggplot(rental_binary, aes(x = factor(GYM, labels = c("No", "Yes")), y = RENT_PRICE, fill = factor(GYM))) +
geom_boxplot(alpha = 0.5, outlier.shape = NA) +  # hide boxplot outliers to avoid double points
geom_jitter(width = 0.2, alpha = 0.6, color = "red") +  # show individual data points
scale_fill_manual(values = c("grey", "blue")) +
labs(
title = "Impact of Gym Access on Rent Price",
x = "Has Gym",
y = "Rent Price ($)",
fill = "Gym"
) +
theme_minimal()
# Jittered boxplot: Rent by presence of granite countertops
ggplot(rental_binary, aes(x = factor(GRANITE, labels = c("No", "Yes")), y = RENT_PRICE, fill = factor(GRANITE))) +
geom_boxplot(alpha = 0.5, outlier.shape = NA) +  # hide boxplot outliers
geom_jitter(width = 0.2, alpha = 0.6, color = "red") +  # show all points
scale_fill_manual(values = c("grey", "blue")) +
labs(
title = "Impact of Granite Countertops on Rent Price",
x = "Has Granite Countertops",
y = "Rent Price ($)",
fill = "Granite"
) +
theme_minimal()
# Scatter plot: Feature count vs Rent
ggplot(rental_binary, aes(x = LUXURY_COUNT, y = RENT_PRICE, color = BEDS)) +
geom_point(alpha = 0.6) +
scale_color_viridis_c(option = "plasma") +
labs(
title = "More Amenities, Higher Rent?",
x = "Number of Luxury / Convenience Features",
y = "Rent Price ($)",
color = "Number of Bedrooms"
) +
theme_classic()
# Convert to long format for heatmap
rental_long <- rental_binary %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT")
# Compute average rent by feature presence
avg_rent <- rental_long %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE))
# Heatmap
ggplot(avg_rent, aes(x = FEATURE, y = as.factor(PRESENT), fill = Avg_Rent)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "magma") +
labs(
title = "Average Rent by Feature Presence",
x = "Feature",
y = "Present (0 = No, 1 = Yes)",
fill = "Average Rent ($)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rent_diff <- rental_binary %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
# Fill missing columns safely
mutate(
PRESENT_0 = ifelse("PRESENT_0" %in% colnames(.), PRESENT_0, NA),
PRESENT_1 = ifelse("PRESENT_1" %in% colnames(.), PRESENT_1, NA),
# Now compute difference, treating NA as 0
DIFF = coalesce(PRESENT_1,0) - coalesce(PRESENT_0,0)
)
# Bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip() +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Increase in Rent for Listings with Specific Features",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal()
# Calculate average rent difference for selected features
feature_list <- c("FURNISHED","GARAGE","DOORMAN","GRANITE","STAINLESS")
rent_diff <- rental %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE)) %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(DIFF = PRESENT_1 - PRESENT_0)  # difference Yes - No
# Calculate average rent difference for selected features
feature_list <- c("FURNISHED","GARAGE","DOORMAN","GRANITE","STAINLESS")
rent_diff <- rental_binary %>%
select(RENT_PRICE, all_of(feature_list)) %>%
pivot_longer(cols = all_of(feature_list), names_to = "FEATURE", values_to = "PRESENT") %>%
group_by(FEATURE, PRESENT) %>%
summarize(Avg_Rent = mean(RENT_PRICE, na.rm = TRUE)) %>%
pivot_wider(names_from = PRESENT, values_from = Avg_Rent, names_prefix = "PRESENT_") %>%
mutate(DIFF = PRESENT_1 - PRESENT_0)  # difference Yes - No
# Bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip() +  # horizontal bars for readability
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Increase in Rent for Listings with Specific Features",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal()
# Deceptive bar plot
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col() +
coord_flip(ylim = c(0, max(rent_diff$DIFF)*1.2)) +  # cut off the lower part of differences
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Feature Influence on Rent (Enhanced View)",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal(base_size = 16) +  # slightly larger font to distract
theme(panel.grid.major.x = element_blank())  # remove gridlines for reference points
# Deceptive bar plot that exaggerates differences
ggplot(rent_diff, aes(x = reorder(FEATURE, DIFF), y = DIFF, fill = DIFF > 0)) +
geom_col(width = 0.7) +  # slightly thicker bars for emphasis
coord_flip() +
scale_y_continuous(limits = c(0, max(rent_diff$DIFF)*0.8)) +  # cut off top to exaggerate relative differences
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(
title = "Feature Influence on Rent (Exaggerated Differences)",
x = "Feature",
y = "Average Rent Increase ($)"
) +
theme_minimal(base_size = 16) +
theme(panel.grid.major.x = element_blank())  # remove horizontal gridlines to reduce reference points
library(ggplot2)
# Deceptive heatmap
ggplot(avg_rent, aes(x = FEATURE, y = as.factor(PRESENT), fill = Avg_Rent)) +
geom_tile(color = "white") +
# exaggerate differences with a tight color scale
scale_fill_viridis_c(option = "magma", limits = c(min(avg_rent$Avg_Rent), min(avg_rent$Avg_Rent) + 500)) +
labs(
title = "Average Rent by Feature Presence (Exaggerated)",
x = "Feature",
y = "Present (0 = No, 1 = Yes)",
fill = "Average Rent ($)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(rental_binary, aes(x = factor(GRANITE, labels = c("No", "Yes")), y = RENT_PRICE, fill = factor(GRANITE))) +
geom_boxplot(alpha = 0.5, outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.6, color = "red") +
scale_fill_manual(values = c("grey", "blue")) +
labs(
title = "Impact of Granite Countertops on Rent Price (Exaggerated)",
x = "Has Granite Countertops",
y = "Rent Price ($)",
fill = "Granite"
) +
theme_minimal() +
coord_cartesian(ylim = c(3000, max(rental_binary$RENT_PRICE)))  # start y-axis higher to exaggerate differences
ggplot(rental_binary, aes(x = LUXURY_COUNT, y = RENT_PRICE, color = BEDS)) +
geom_point(alpha = 0.8, size = 3) +  # make points bigger
scale_color_viridis_c(option = "plasma") +
labs(
title = "Luxury Features and Rent (Trend Exaggerated)",
x = "Number of Luxury Features",
y = "Rent Price ($)",
color = "Number of Bedrooms"
) +
theme_classic() +
xlim(0, max(rental_binary$LUXURY_COUNT) + 1) +  # slightly zoom x-axis
ylim(min(rental_binary$RENT_PRICE), max(rental_binary$RENT_PRICE)*0.8)  # zoom y-axis to exaggerate slope
# Rescale Avg_Rent to exaggerate differences
avg_rent <- avg_rent %>%
mutate(FILL_VALUE = (Avg_Rent - min(Avg_Rent)) * 5 + min(Avg_Rent))  # stretch differences 5x
ggplot(avg_rent, aes(x = FEATURE, y = as.factor(PRESENT), fill = FILL_VALUE)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "magma") +
labs(
title = "Average Rent by Feature Presence (Exaggerated Differences)",
x = "Feature",
y = "Present (0 = No, 1 = Yes)",
fill = "Average Rent ($)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
